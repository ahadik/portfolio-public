@import url('https://fonts.googleapis.com/css?family=Merriweather:400,400i,700,700i,900,900i&display=swap');
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,600,800&display=swap');

@font-face {
  font-family: "SFMono-Regular";
  src: url("../fonts/sf-mono/SFMono-Regular.woff") format("woff"),
  url("../fonts/sf-mono/SFMono-Regular.woff2") format("woff2");
}

// Font Awesome font file imports
@import './fontawesome/fontawesome';
@import './fontawesome/light';
@import './fontawesome/regular';
@import './fontawesome/solid';
@import './fontawesome/brands';

// Prism CSS shims
.gatsby-highlight {
  background-color: #002b36;
  border-radius: 0.3em;
  margin: 0;
  padding: 1rem;
  overflow: auto;
  position: relative;
  -webkit-overflow-scrolling: touch;
}

.gatsby-highlight pre[class*="language-"].line-numbers {
  padding: 0;
  padding-left: 2.8em;
  overflow: initial;
}

.gatsby-highlight pre[class*="language-"] {
  -webkit-overflow-scrolling: touch;
}
.gatsby-highlight pre[class*="language-"]::before {
  background: black;
  border-radius: 0 0 0.25rem 0.25rem;
  color: white;
  font-size: 12px;
  letter-spacing: 0.025rem;
  padding: 0.1rem 0.5rem;
  position: absolute;
  right: 1rem;
  text-align: right;
  text-transform: uppercase;
  top: -1.5rem;
  display: block;
}

.gatsby-highlight {
  .token.comment {
    color: #61707b;
  }
}

.gatsby-highlight + .gatsby-highlight {
  margin-top: 1rem;
}

@mixin language-tags($languages) {
  @each $language in $languages {
    .gatsby-highlight pre.language-#{$language}::before {
        content: "#{$language}";
        background: color(medium, gold);
        color: black;
      }
  }
}

@include language-tags(jsx scss javascript html css json);

// Site styling
body {
  font-family: $serifFamilies; 
  font-weight: $normalWeight;
  font-size: $base-font;
  color: $black;
}

.bold, b {
  font-weight: $boldWeight;
}

.strong, strong {
  font-weight: $strongWeight;
}

.monospace {
  @include monospace;
}

.sans-serif {
  @include sans-serif;
}

.serif {
  @include serif;
}

.secondary {
  color: color(dark, gray);
}

.invert {
  color: $white;
}

.invert-secondary {
  color: color(light, gray);
}

.center-text {
  text-align: center;
}

blockquote {
  font-style: italic;
  display: inline-block;
  border-left: 3px solid color(light,gray);
}

ol, ul {
  display: inline-block;
}

h1, h2, h3, h4, h5 {
  @include sans-serif;
  font-weight: $boldWeight;
  color: $black;
  margin-bottom: 0;
}

h6 {
  @include sans-serif;
  font-weight: $strongWeight;
  color: color(dark, green);
  text-transform: uppercase;
  letter-spacing: 0.08rem;
  margin-bottom: 0;
}

ol {
  margin-left: #{pow($fontMultiplier, 4)}rem;
}

ul {
  list-style: none;
  margin-left: #{pow($fontMultiplier, 6)}rem;
  margin-bottom: 0;

  li {
    position: relative;
    margin-bottom: 0;

    &::before {
      font-family: 'Font Awesome 5 Pro';
      font-weight: 400;
      content: '\f178';
      color: color(dark, green);
      position: absolute;
      transform: translateX(calc(-100% - #{$spacing-03}));
    }
  }
}

li {
  margin-bottom: 0;

  & + & {
    margin-top: 0.5rem;
  }
}

.clear-list-style {
  @include clear-list-style;
}

h1, h2, h3, h4, h5, h6, p, li {
  > code {
    background: color(light, gray) !important;
    color: color(dark, blue) !important;
    border: 1px solid color(medium, gray) !important;
    &::before {
      content: '';
    }

    &::after {
      content: '';
    }
  }
}


@mixin combinatoricSpacing($outer, $inner, $spacing, $mirror: false) {
  @each $outerElement in $outer {
    @each $innerElement in $inner {
      #{$outerElement} + #{$innerElement} {
        margin-top: $spacing;
      }

      @if ($mirror) {
        #{$innerElement} + #{$outerElement} {
          margin-top: $spacing;
        }
      }
    }
  }
}

$headerTags: (h1, h2, h3, h4, h5, h6);
$bodyTextTags: (p, ol, ul);
$textTags: join($headerTags, $bodyTextTags);
$textBlockTags: ('.button', '.mdx-layout:not(.mdx-layout--media)', '.gatsby-highlight', '.note', blockquote);

// Media Spacing
$mediaClasses: ('.gallery', '.mdx-layout--media', '.image', '.video');

@include combinatoricSpacing($textTags, $mediaClasses, #{pow($fontMultiplier, 9)}rem, true);
@include combinatoricSpacing($mediaClasses, $mediaClasses, #{pow($fontMultiplier, 9)}rem);

// Content Block Spacing
@include combinatoricSpacing($textTags, $textBlockTags, #{pow($fontMultiplier, 5)}rem, true);
@include combinatoricSpacing($textBlockTags, $textBlockTags, #{pow($fontMultiplier, 5)}rem);

// Text Spacing
@include combinatoricSpacing((h1), $textTags, #{$fontMultiplier}rem);

@include combinatoricSpacing((h2), join((h2, h3, h4, h5, h6), $bodyTextTags), #{pow($fontMultiplier, -2)}rem, false);

@include combinatoricSpacing((h3), join((h3, h4, h5, h6), $bodyTextTags), #{pow($fontMultiplier, -3)}rem);

@include combinatoricSpacing((h4), join((h4, h5, h6), $bodyTextTags), #{pow($fontMultiplier, -4)}rem);

@include combinatoricSpacing((h5), join((h5, h6), $bodyTextTags), #{pow($fontMultiplier, -5)}rem);

@include combinatoricSpacing((h6), join((h6), $bodyTextTags), #{pow($fontMultiplier, -8)}rem);

@include combinatoricSpacing($bodyTextTags, (h1), #{pow($fontMultiplier, 4)}rem);

@include combinatoricSpacing($bodyTextTags, (h2, h3, h4, h5, h6), #{pow($fontMultiplier, 3)}rem);

@include combinatoricSpacing($bodyTextTags, $bodyTextTags, #{$fontMultiplier}rem);


@include typography(desktop);

@include mobile {
  @include typography(mobile);
}

@include tablet {
  @include typography(tablet);
}

.mobile {
  @include typography(mobile);
}
