.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: calc(100% + #{$gridPadding});
  margin-left: #{-$gridPadding / 2};
  margin-right: #{-$gridPadding / 2};
}

.row + .row {
  margin-top: $spacing-04;
}

.row + .row.row--large-spacing {
  margin-top: $spacing-08;
}

$numGutters: $numCols - 1;
// The total horizontal amount allotted to columns, after subtracting off gutters
$totalWidth: calc(100% - #{($gridPadding * $numGutters)});

@function colWidth($i) {
  @return calc(#{$i / $numCols * 100%} - #{$gridPadding});
}

@for $i from 1 through $numCols {
  .col-#{$i} {
    width: colWidth($i);
    margin-left: #{$gridPadding / 2};
    margin-right: #{$gridPadding / 2};
  }
}

@for $i from 1 through $numCols {
  .col-offset-#{$i} {
    margin-left: calc(#{colWidth($i)} + #{$gridPadding * 1.5});
  }
}

@include desktop {
  .grid-break-8-to-12 {
    $offsetVal: calc((#{colWidth(2)} * -1.5) - #{$gridPadding * 2.25});
    margin-left: $offsetVal;
    margin-right: $offsetVal;
    width: calc(100% + (-2 * #{$offsetVal}));
  }
}

.grid-break-screen-width {
  margin-left: calc(((100vw - 100%) / -2) - #{($gridPadding / 2)});
  width: calc(100vw + #{$gridPadding});
}

@mixin deviceGrid($device) {
  .#{$device}-col-offset-0 {
    margin-left: 0;
  }

  @for $i from 1 through $numCols {
    .#{$device}-col-#{$i} {
      width: colWidth($i);
      margin-left: #{$gridPadding / 2};
      margin-right: #{$gridPadding / 2};
    }
  }

  @for $i from 1 through $numCols {
    .#{$device}-col-offset-#{$i} {
      margin-left: calc(#{colWidth($i)} + #{$gridPadding * 1.5});
    }
  }
}

@include mobile{
  @include deviceGrid(mobile);
}

@include tablet{
  @include deviceGrid(tablet);
}
